.. R_Type_docs documentation master file, created by
   sphinx-quickstart on Sun Feb  5 16:31:57 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

Welcome to R_Type_docs's documentation!
=======================================

.. toctree::
   :maxdepth: 2
   :caption: Contents:



Indices and tables
==================

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`

RTYPE
======

Description
-----------

The goal of the project is to implement a multithreaded server with a graphical client to play the game “R-Type”. To do this we have to build our own game engine.


Build
-----

This project was built using the game engine: `My ecs <https://github.com/chetrit/my_ecs>`_.

Build for Linux and MacOs
^^^^^^^^^^^^^^^^^^^^^^^^^

To build:

.. code-block:: bash

    ./build_unix.sh

To clean and rebuild from scratch:

.. code-block:: bash

    ./build_unix.sh re

To clean the repo:

.. code-block:: bash

    ./build_unix.sh clean

Build for Windows
^^^^^^^^^^^^^^^^^

To build:

.. code-block:: bash

    ./build_windows.bat

To clean and rebuild from scratch:

.. code-block:: bash

    ./build_windows.bat re

To clean the repo:

.. code-block:: bash

    ./build_windows.bat clean

Installation
------------

Clone the repository, then run the following commands:

.. code-block:: bash

    cmake .
    cmake --build
    ./r-type

Usage
-----

Documentation
-------------

You can find all the documentation in the file "doc":

.. code-block:: bash

    cd doc

See `PROTOCOL.md <./doc/PROTOCOL.md>`_ for the network communication protocol.

See `ECS-scheme.png <doc/ECS%20-%20scheme.png>`_ for the schema of the ecs.

Features
--------

See `CHANGELOG.md <./CHANGELOG.md>`_ for a complete details of features and versions.

Authors
-------

- Alexandre Chetrit <https://github.com/chetrit>
- Théo de Boysson <https://github.com/BoyssonFresh>
- Julien Letoux <https://github.com/lockhead>
- Ines Maaroufi <https://github.com/Happinesseuh>


Protocol Documentation: R-Type Interactions Between Server and Client
=============================================================

Protocol
--------
- ``DA BE BE EF (int32_t)``: Magic number for responses
- ``02 (uint16_t)``: Size (size of message after this byte)
- ``01 (uint8_t)``: Code
- ``05 ARRAY OF ARGS (uint8_t*)``: RESPONSES

Client Command
--------------
- ``01 (uint8_t)``: PLAYER MOVE
- ``02 (uint8_t)``: PLAYER SHOOT
- ``03 (uint8_t)``: PLAYER QUIT
- ``04 (uint8_t)``: STATUS OK
- ``05 (uint8_t)``: CLIENT CONNECTED

Player Move
~~~~~~~~~~
- ``01 (uint8_t)``: UP
- ``02 (uint8_t)``: DOWN
- ``03 (uint8_t)``: LEFT
- ``04 (uint8_t)``: RIGHT

Player Shoot
~~~~~~~~~~~
- ``00 00(uint8_t)``: PLAYER POSITION

Client Command Examples
~~~~~~~~~~~~~~~~~~~~~~
::

    DA BE BE EF 00 02 01 01 : PLAYER MOVE UP
    DA BE BE EF 00 02 01 03 : PLAYER MOVE LEFT
    DA BE BE EF 00 01 02 : PLAYER SHOOT
    DA BE BE EF 00 01 03 : PLAYER QUIT

Server Command
--------------
- ``01 (uint8_t)``: PLAYER POSITION
- ``02 (uint8_t)``: ENEMIE POSITION
- ``03 (uint8_t)``: PLAYER DECO
- ``04 (uint8_t)``: PLAYER CRASH
- ``05 (uint8_t)``: PLAYER DEAD
- ``06 (uint8_t)``: ENEMIE DEAD

Player Position
~~~~~~~~~~~~~~
- ``00 00 00(uint8_t)``: POSITION / PLAYER ID

Enemie Position
~~~~~~~~~~~~~~
- ``00 00 00(uint8_t)``: POSITION / ENEMIE ID

Player Deco
~~~~~~~~~~~
- ``00 (uint8_t)``: PLAYER ID

Player Crash
~~~~~~~~~~~
- ``00 (uint8_t)``: PLAYER ID

Player Dead
~~~~~~~~~~
- ``00 (uint8_t)``: PLAYER ID

Enemie Dead
~~~~~~~~~~
- ``00 (uint8_t)``: ENEMIE ID

Server Command Examples
~~~~~~~~~~~~~~~~~~~~~~
::

    DA BE BE EF 04 01 05 08 07 : PLAYER '05' MOVE TO (08, 07)
    DA BE BE EF 04 01 03 16 01 : PLAYER '03' MOVE TO (16, 01)
    DA BE BE EF 02 04 01 : PLAYER '01' CRASH
    DA BE BE EF 02 06 13 : ENEMIE '13' DEAD

Requests
--------
Full Example:

::

    \xDA\xBE\xBE\xEF\x0\x3GUI\xDA\xBE\xBE\xEF\x3\x2\x1\

ECS Documentation
==================

.. code-block:: none

   Entity component system (ECS) is a software architectural pattern mostly used in video game development for the representation of game world objects. An ECS comprises entities composed from components of data, with systems which operate on entities' components.

   ECS follows the principle of composition over inheritance, meaning that every entity is defined not by a type hierarchy, but by the components that are associated with it. Systems act globally over all entities which have the required components.

.. image:: ECS%20-%20scheme.png

Components
----------

Clock
~~~~~

.. code-block:: none

   To add a clock in your game.
   You can give as parameter an interval to the clock.

Collider
~~~~~~~~

.. code-block:: none

   To add a colider in your game.
   You can give as parameter a width and an height.

Controllable
~~~~~~~~~~~~

.. code-block:: none

   To add all the controlable of your game.
   Like Up, Down, Left, Right ...

Human
~~~~~

.. code-block:: none

   To add a player to your game.
   You need to give an id as parameter.

Identifiable
~~~~~~~~~~~~

.. code-block:: none

   To identifie an entity.
   You need to give an id as parameter.

Limited
~~~~~~~

.. code-block:: none

   To give the limite of your map in your game.
   You need to gove the top left corner position and the width and the height of the limit as parmeter.

Position
~~~~~~~~

.. code-block:: none

   To set a position of an entity.
   You need to give a Vector as parameter.

Sprite
~~~~~~

.. code-block:: none

   To create a sprite in your game.
   You can give a color to it.
   The default color is white.

Velocity
~~~~~~~~

.. code-block:: none

   To give a velocity to an entity of your game.
   You need to give a vector as parameter.


Network Operation
=================

UDP
---

.. code-block:: none

   In computer networking, the User Datagram Protocol (UDP) is one of the core communication protocols of the Internet protocol suite used to send messages (transported as datagrams in packets) to other hosts on an Internet Protocol (IP) network. Within an IP network, UDP does not require prior communication to set up communication channels or data paths.

.. code-block:: none

   We are using udp for all the communication between the server and the client for the game.

TCP
---

.. code-block:: none

   The Transmission Control Protocol (TCP) is one of the main protocols of the Internet protocol suite. It originated in the initial network implementation in which it complemented the Internet Protocol (IP). Therefore, the entire suite is commonly referred to as TCP/IP. TCP provides reliable, ordered, and error-checked delivery of a stream of octets (bytes) between applications running on hosts communicating via an IP network. Major internet applications such as the World Wide Web, email, remote administration, and file transfer rely on TCP, which is part of the Transport Layer of the TCP/IP suite. SSL/TLS often runs on top of TCP.

.. code-block:: none

   We are only using tcp for the connection.
